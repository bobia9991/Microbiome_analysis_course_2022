# ######################################################################
#
##  Meta-Analysis Model Building, Complete pipeline
#
# ######################################################################

# Packages
# Packages
library("tidyverse")
library("SIAMCAT")
library("yaml")

# set parameters
setwd("/Users/ecekartal/Documents/SAEZ/projects/workflows/Microbiome/microbiomeAnalysis/ece")

PARAM <- list()
PARAM$folder <- paste0(getwd(), "/")
PARAM$folder.Rdata <- paste0(PARAM$folder, "Rdata/")
PARAM$folder.results <- paste0(PARAM$folder, "results/")
# load data metag motu 
load(paste0(PARAM$folder.Rdata, "metag.pc.Rdata"))
# ##############################################################################
# general 
cat('Starting model building script\n')
start.time <- proc.time()[1]
set.seed(4576)

parameters <- yaml.load_file('../parameters.yaml')
# extract parameters
norm.method <- parameters$model.building$norm.method
n.p <- list(log.n0=as.numeric(parameters$model.building$log.n0) ,
            sd.min.q=as.numeric(parameters$model.building$sd.min.q),
            n.p=as.numeric(parameters$model.building$n.p),
            norm.margin=as.numeric(parameters$model.building$norm.margin),
            ab.cutoff= as.numeric(parameters$model.building$ab.cutoff))
num.folds <- as.numeric(parameters$model.building$num.folds)
num.resample <- as.numeric(parameters$model.building$num.resample)
ml.method <- parameters$model.building$ml.method
min.nonzero.coeff <- as.numeric(parameters$model.building$min.nonzero.coeff)
modsel.crit <- list(parameters$model.building$modsel.crit)
perform.fs <- FALSE
param.fs <- list()
if (!tag %in% c('species', 'genus')){
  perform.fs <- TRUE
  param.fs.ss <- 
    list(thres.fs = as.numeric(
      parameters$model.building$feature.selection$cutoff),
      method.fs = parameters$model.building$feature.selection$type)
  param.fs.loso <- 
    list(thres.fs = 3200,
         method.fs = parameters$model.building$feature.selection$type)
}

# overwrite ml method with command line argument
if (length(args) == 2){
  ml.method <- args[2]
}

# ##############################################################################
# Get Data
feat.all<- feat.st.rel.cancer.3mg
meta=meta.st.cancer
stopifnot(all(meta$Sample_ID %in% colnames(feat.all)))

# ##############################################################################
# Model Building
models <- list()
for (model in c('lasso',  'ridge', "lasso_ll", 'randomForest',"ridge_ll", 'enet')){
  # single study model
  meta.train <- meta
  feat.train <- feat.all
  
  siamcat <- siamcat(feat=feat.train, meta=meta.train,
                     label = 'status', case='PC')
  siamcat <- filter.features(siamcat, filter.method = 'abundance', 
                             cutoff=0.001, verbose=3)
  siamcat <- normalize.features(siamcat, norm.method = norm.method,
                                norm.param = n.p, feature.type = 'filtered',
                                verbose=3)
  siamcat <- create.data.split(siamcat, num.folds = num.folds,
                               num.resample = num.resample)
  siamcat <- train.model(siamcat,
                         method = model
                        )
  siamcat <- make.predictions(siamcat)
  siamcat <- evaluate.predictions(siamcat)
  models[[model]] <- siamcat
  save(siamcat, file=paste0(PARAM$folder.R,'/', model, '_' , norm.method,'nonfiltered.RData'))
  return(models)
  cat("Successfully trained a single study model", model, '\n')
  
}
